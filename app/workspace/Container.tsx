'use client'

import { Button, Modal, TextInput, FileInput, Pagination } from "flowbite-react";
import { redirect } from 'next/navigation'
import Sidebar from './Sidebar'
import { signOut } from './workspaceActions'
// import React from 'react'
import { use, useEffect, useRef, useState } from 'react'

import { useAppSelector, useAppDispatch, useMousePosition } from '../hooks'
import { setSelectedFile, selectWorkspace } from './workspaceSlice'
import { Provider } from 'react-redux'
import { store } from '../store'
import { Document, Page } from 'react-pdf'
import { pdfjs } from 'react-pdf';
import { getModalSetState, setModalSetState } from "./modalSetSlice";
import { getModalFolderState, setModalFolderState } from "./modalFolderSlice"
import { AddFolder, AdjustQuestionPriorityRating, CreateSet, DeleteFolder, DeleteQuestionById, DeleteSet, GetAllQuestionData, GetAutogeneratedQuestionData, GetQuestionData, GetQuestionDataById, ProcessFile } from "../lib/actions";
import { getModalFolderDeletionState, setModalFolderDeletionState } from "./modalFolderDeletionSlice";
import { getModalSetDeletionState, setModalSetDeletionState } from "./modalSetDeletionSlice";

import { fromBase64, fromBuffer } from "pdf2pic";
import { PDFDocument } from "pdf-lib"
import Tesseract, { createWorker } from 'tesseract.js';
import { getModalQuestionDeletionState, setModalQuestionDeletionState } from "./modalQuestionDeletionSlice";

// pdfjs.GlobalWorkerOptions.workerSrc = new URL(
//     'pdfjs-dist/legacy/build/pdf.worker.min.mjs',
//     import.meta.url,
// ).toString();

const options = {
    cMapUrl: '/cmaps/',
    standardFontDataUrl: '/standard_fonts/',
};

export default function Wrapper({ user }: { user: any }) {
    return (
        <Provider store={store}>
            <Container user={user} />
        </Provider>
    )
}

export function Container({ user }: { user: any }) {

    pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/legacy/build/pdf.worker.min.mjs`;
    // pdfjs.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js';

    const files = user[0]?.content;

    const modalSetState = useAppSelector(getModalSetState);
    const [modalSetProcessState, setModalSetProcessState] = useState(false);
    const modalSetDeletionState = useAppSelector(getModalSetDeletionState);
    const modalFolderState = useAppSelector(getModalFolderState);
    const modalFolderDeletionState = useAppSelector(getModalFolderDeletionState);
    const modalQuestionDeletionState = useAppSelector(getModalQuestionDeletionState);
    const selectedFile = useAppSelector(selectWorkspace);
    const dispatch = useAppDispatch()

    const [numPages, setNumPages] = useState<number>(0);
    const [pageNumber, setPageNumber] = useState<number>(1);
    const [currentFiles, setCurrentFiles] = useState(files);

    const [questionBoxRender, setQuestionBoxRender] = useState<any[]>([]);
    const [questionQueueRender, setQuestionQueueRender] = useState<any[]>([]);
    const [selectedQuestion, setSelectedQuestion] = useState<any>();
    const [isManuallyAddingQuestion, setIsManuallyAddingQuestion] = useState(false);

    async function onDocumentLoadSuccess({ numPages }: { numPages: number }): Promise<void> {
        setNumPages(numPages);
        const currentQuestions = await GetQuestionData(selectedFile.raw, pageNumber - 1);
        setQuestionBoxRender(RenderQuestionBoxes(await currentQuestions));
        const allQuestions = await GetAllQuestionData(selectedFile.raw);
        setQuestionQueueRender(RenderQuestionQueue(await allQuestions));
    }

    const RenderQuestionBoxes = (questions: any[]) => {
        if (questions.length === 0) return [];
        console.log("ðŸš€ ~ RenderQuestionBoxes ~ questions:", questions)

        let res: any[] = [];
        for (let i = 0; i < questions.length; i++) {
            const question = questions[i];
            const width = Math.abs(question.rightBound - question.leftBound);
            const height = Math.abs(question.bottomBound - question.topBound);
            res.push(
                <div
                    onClick={async () => {
                        // const id = question.id;
                        // const databaseRet = (await GetQuestionDataById(id))[0];
                        setSelectedQuestion(question);
                    }}
                    className={"absolute box-border opacity-20 z-40"}
                    style={
                        {
                            backgroundColor: question.color,
                            left: `${question.leftBound}px`,
                            top: `${question.topBound}px`,
                            width: `${width}px`,
                            height: `${height}px`
                        }
                    }
                    key={question.id}></div>
            )
        }
        console.log("ðŸš€ ~ RenderQuestionBoxes ~ res:", res)
        return res;
    }

    const RenderQuestionQueue = (questions: any[]) => {
        let res: any[] = [];
        const maxRenderCount = 10;
        const sortedQuestionsByPriority = questions.sort((a, b) => a.priorityRating - b.priorityRating);
        for (let i = 0; i < Math.min(maxRenderCount, sortedQuestionsByPriority.length); i++) {
            const question = sortedQuestionsByPriority[i];
            res.push(
                <Button onClick={async () => {
                    setSelectedQuestion(question);
                    setPageNumber(question.pageNumber + 1);
                    const currentQuestions = await GetQuestionData(selectedFile.raw, question.pageNumber);
                    setQuestionBoxRender(RenderQuestionBoxes(await currentQuestions));
                }}>{question.name}</Button>
            )
        }
        return res;
    }

    return (
        <div className="bg-white min-h-screen">
            <div className="flex flex-row">
                {/* SIDEBAR */}
                <div className="basis-1/4 flex flex-col">

                    {/* Sidebar with files */}
                    <Sidebar files={currentFiles} userId={user[0].id} />

                    {/* Sign out button */}
                    <form
                        action={signOut}
                    >
                        <Button type="submit">
                            <div className="hidden md:block">Sign Out</div>
                        </Button>
                    </form>

                    {/* Detect and autogenerate questions button */}
                    <form action={async () => {
                        const isAutogeneratedPresent = (await GetAutogeneratedQuestionData(selectedFile.raw)).length > 0;
                        if (!isAutogeneratedPresent) {
                            ProcessFile(selectedFile.raw, numPages as number);
                        } else {
                            setModalSetProcessState(true);
                        }
                    }}>
                        <Button type="submit">Automatically detect questions</Button>
                    </form>
                </div>

                {/* DOCUMENT DISPLAY */}
                <div className="flex flex-col basis-1/2 justify-items-center">
                    {/* Question queue */}
                    <div className="justify-self-center">
                        <Button.Group>
                            {...questionQueueRender}
                        </Button.Group>
                    </div>

                    {/* Document render */}
                    <div className="flex-grow flow-col flex relative justify-center items-center">
                        {questionBoxRender}
                        <Document file={selectedFile.entities[selectedFile.entities.length - 1]} onLoadSuccess={onDocumentLoadSuccess} className="w-full">
                            <Page pageNumber={pageNumber} width={816} renderAnnotationLayer={false} renderTextLayer={false} />
                        </Document>
                    </div>
                </div>

                {/* CONTROL PANEL */}
                <div className="basis-1/4">
                    <div className="sticky top-0">
                        {/* PAGINATION */}
                        {numPages > 0
                            ? <Pagination currentPage={pageNumber} totalPages={numPages!}
                                onPageChange={
                                    async (page: number) => {
                                        setPageNumber(page);
                                        console.log("ðŸš€ ~ page:", page)
                                        const currentQuestions = await GetQuestionData(selectedFile.raw, page - 1);
                                        // console.log("ðŸš€ ~ currentQuestions:", await currentQuestions)
                                        setQuestionBoxRender(RenderQuestionBoxes(await currentQuestions));
                                    }
                                } />
                            : <div></div>}


                        {/* QUESTION CONTROL */}
                        <div className="mt-4 h-full">
                            {!selectedQuestion
                                ? <p className="text-slate-900">Select a question to get started</p>
                                :
                                <div className="flex flex-col flex-wrap h-full">
                                    <h1 className="text-slate-900">{`Question ${selectedQuestion.name}`}</h1>
                                    <Button.Group>
                                        <Button onClick={async () => {
                                            AdjustQuestionPriorityRating(selectedQuestion, -2);
                                            setSelectedQuestion(undefined);
                                            const allQuestions = await GetAllQuestionData(selectedFile.raw);
                                            setQuestionQueueRender(RenderQuestionQueue(await allQuestions));
                                        }}>Clueless</Button>
                                        <Button onClick={async () => {
                                            AdjustQuestionPriorityRating(selectedQuestion, -1);
                                            setSelectedQuestion(undefined);
                                            const allQuestions = await GetAllQuestionData(selectedFile.raw);
                                            setQuestionQueueRender(RenderQuestionQueue(await allQuestions));
                                        }}>Trivial Error</Button>
                                        <Button onClick={async () => {
                                            AdjustQuestionPriorityRating(selectedQuestion, 1);
                                            setSelectedQuestion(undefined);
                                            const allQuestions = await GetAllQuestionData(selectedFile.raw);
                                            setQuestionQueueRender(RenderQuestionQueue(await allQuestions));
                                        }}>Manageable</Button>
                                        <Button onClick={async () => {
                                            AdjustQuestionPriorityRating(selectedQuestion, 2);
                                            setSelectedQuestion(undefined);
                                            const allQuestions = await GetAllQuestionData(selectedFile.raw);
                                            setQuestionQueueRender(RenderQuestionQueue(await allQuestions));
                                        }}>Easy</Button>
                                    </Button.Group>

                                    <div className="bottom-1 mt-32">
                                        <Button color="warning"
                                            onClick={() => {
                                                dispatch(setModalQuestionDeletionState(selectedQuestion.id));
                                            }}>Delete question</Button>
                                    </div>
                                </div>}

                            {/* MANUALLY ADD QUESTION */}
                            {isManuallyAddingQuestion
                                ?
                                <div>
                                    <Button onClick={() => setIsManuallyAddingQuestion(false)}>Cancel</Button>
                                </div>
                                : <Button onClick={() => setIsManuallyAddingQuestion(true)}>Manually add question</Button>}
                        </div>
                    </div>
                </div>
            </div>

            <div> {/* MODALS */}
                {/* MODAL FOR CREATING A SET */}
                <Modal show={modalSetState.open} onClose={() => dispatch(setModalSetState(''))}>
                    <Modal.Header></Modal.Header>
                    <Modal.Body>
                        <form onSubmit={async (event) => {
                            event.preventDefault();
                            const formData = new FormData(event.target as HTMLFormElement);
                            const file = formData.get("file") as File;
                            const setName = formData.get("set-name") as string;
                            const buffer = await file.arrayBuffer();
                            const uintarr = new Uint8Array(await buffer);

                            const pdfDoc = await PDFDocument.load(await uintarr);
                            const numberOfPages = pdfDoc.getPageCount();

                            const parentFolder = modalSetState.folder;

                            const updatedFiles = await CreateSet(user[0], setName, parentFolder, uintarr, numberOfPages);
                            setCurrentFiles(await updatedFiles);
                            dispatch(setModalSetState(''));
                        }}>
                            <TextInput type="text" name="set-name" />
                            <FileInput name="file" />
                            <Button type="submit">Create Set</Button>
                        </form>
                    </Modal.Body>
                    <Modal.Footer>
                    </Modal.Footer>
                </Modal>

                {/* MODAL FOR PROCESSING A SET {IF PREVIOUS AUTOGENERATIONS HAVE OCCURED} */}
                <Modal show={modalSetProcessState} onClose={() => setModalSetProcessState(false)}>
                    <Modal.Header>Attention: Proceeding will result in the deletion of your old <b>autogenerated</b> questions</Modal.Header>
                    <Modal.Body>
                        <form onSubmit={async (event) => {
                            event.preventDefault();
                            await ProcessFile(selectedFile.raw, numPages as number);
                            setModalSetProcessState(false)
                        }}>
                            <Button type="submit">Replace old autogenerated questions with new generations</Button>
                        </form>
                    </Modal.Body>
                    <Modal.Footer>
                    </Modal.Footer>
                </Modal>

                {/* MODAL FOR DELETING A SET */}
                <Modal show={modalSetDeletionState.open} onClose={() => dispatch(setModalSetDeletionState(''))}>
                    <Modal.Header>Attention: Proceed with deleting this set?</Modal.Header>
                    <Modal.Body>
                        <form onSubmit={async (event) => {
                            event.preventDefault();
                            const targetSetID = modalSetDeletionState.set;
                            console.log("ðŸš€ ~ <formonSubmit={ ~ targetSetID:", targetSetID)
                            const updatedFiles = DeleteSet(user[0], currentFiles, targetSetID);
                            setCurrentFiles(await updatedFiles);
                            dispatch(setModalSetDeletionState(''))
                        }}>
                            <Button type="submit">Delete set</Button>
                        </form>
                    </Modal.Body>
                    <Modal.Footer>
                    </Modal.Footer>
                </Modal>

                {/* MODAL FOR CREATING A FOLDER */}
                <Modal show={modalFolderState.open} onClose={() => dispatch(setModalFolderState(''))}>
                    <Modal.Header></Modal.Header>
                    <Modal.Body>
                        <form action={async (formData) => {
                            const parentFolder = modalFolderState.folder;
                            const prospectiveFolder = formData.get("folder-name");
                            const updatedFiles = await AddFolder(parentFolder, prospectiveFolder as string, currentFiles, user[0]);
                            setCurrentFiles(await updatedFiles)
                            dispatch(setModalFolderState(''))
                        }}>
                            <TextInput type="text" name="folder-name" />
                            <Button type="submit">Add Subfolder</Button>
                        </form>
                    </Modal.Body>
                    <Modal.Footer>
                    </Modal.Footer>
                </Modal>


                {/* MODAL FOR DELETING A FOLDER */}
                <Modal show={modalFolderDeletionState.open} onClose={() => dispatch(setModalFolderDeletionState(''))}>
                    <Modal.Header>Attention: Proceed with deleting this folder and its contents?</Modal.Header>
                    <Modal.Body>
                        <form action={async () => {
                            const targetFolder = modalFolderDeletionState.folder;
                            console.log("ðŸš€ ~ <formaction={ ~ targetFolder:", targetFolder)
                            const updatedFiles = await DeleteFolder(targetFolder, currentFiles, user[0]);
                            setCurrentFiles(await updatedFiles);
                            dispatch(setModalFolderDeletionState(''))
                        }}>
                            <Button type="submit">Delete folder</Button>
                        </form>
                    </Modal.Body>
                    <Modal.Footer>
                    </Modal.Footer>
                </Modal>

                {/* MODAL FOR DELETING A QUESTION */}
                <Modal show={modalQuestionDeletionState.open} onClose={() => dispatch(setModalQuestionDeletionState(''))}>
                    <Modal.Header>Attention: Proceed with deleting this question?</Modal.Header>
                    <Modal.Body>
                        <form action={async () => {
                            const targetQuestion = modalQuestionDeletionState.question; // QUESTION ID
                            await DeleteQuestionById(targetQuestion);
                            const currentQuestions = await GetQuestionData(selectedFile.raw, pageNumber - 1);
                            setQuestionBoxRender(RenderQuestionBoxes(await currentQuestions));
                            const allQuestions = await GetAllQuestionData(selectedFile.raw);
                            setQuestionQueueRender(RenderQuestionQueue(await allQuestions));
                            dispatch(setModalQuestionDeletionState(''))
                        }}>
                            <Button type="submit">Delete question</Button>
                        </form>
                    </Modal.Body>
                    <Modal.Footer>
                    </Modal.Footer>
                </Modal>
            </div>

        </div>
    )
}